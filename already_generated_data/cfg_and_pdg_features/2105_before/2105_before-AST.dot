digraph 2105_before_AST {
  // graph-vertices
  n1  [label="ROOT: 2105_before.java"];
  n2  [label="CLASS"];
  n3  [label="MODIFIER: public"];
  n4  [label="NAME: Serialevent"];
  n5  [label="METHOD"];
  n6  [label="MODIFIER: @java.lang.Override public synchronized"];
  n7  [label="RETURN: void"];
  n8  [label="NAME: serialEvent"];
  n9  [label="PARAMS"];
  n10  [label="VAR"];
  n11  [label="TYPE: test.SerialPortEvent"];
  n12  [label="NAME: oEvent"];
  n13  [label="BLOCK"];
  n14  [label="VAR"];
  n15  [label="TYPE: java.lang.String"];
  n16  [label="NAME: temp"];
  n17  [label="IF"];
  n18  [label="COND: (oEvent.getEventType()) == (SerialPortEvent.DATA_AVAILABLE)"];
  n19  [label="THEN"];
  n20  [label="TRY"];
  n21  [label="BLOCK"];
  n22  [label="7:  temp = serialInput.readLine()"];
  n23  [label="8:  java.lang.System.out.println(temp)"];
  n24  [label="VAR"];
  n25  [label="TYPE: int"];
  n26  [label="NAME: index"];
  n27  [label="INIT: = temp.indexOf('.')"];
  n28  [label="10:  tag = temp.substring((index + 1))"];
  n29  [label="IF"];
  n30  [label="COND: transferPage1"];
  n31  [label="THEN"];
  n32  [label="VAR"];
  n33  [label="TYPE: test.IndexCursor"];
  n34  [label="NAME: cursor"];
  n35  [label="INIT: = test.CursorBuilder.createCursor(gatorTable.getIndex('TagIndex'))"];
  n36  [label="13:  cursor.beforeFirst()"];
  n37  [label="VAR"];
  n38  [label="TYPE: test.Row"];
  n39  [label="NAME: latestRow"];
  n40  [label="INIT: = null"];
  n41  [label="WHILE"];
  n42  [label="COND: cursor.findNextRow(java.util.Collections.singletonMap('Tag Number', tag))"];
  n43  [label="BLOCK"];
  n44  [label="VAR"];
  n45  [label="TYPE: test.Row"];
  n46  [label="NAME: row"];
  n47  [label="INIT: = cursor.getCurrentRow()"];
  n48  [label="IF"];
  n49  [label="COND: row != null"];
  n50  [label="THEN"];
  n51  [label="18:  latestRow = row"];
  n52  [label="IF"];
  n53  [label="COND: latestRow != null"];
  n54  [label="THEN"];
  n55  [label="22:  previousRow = latestRow"];
  n56  [label="ELSE"];
  n57  [label="24:  previousRow = null"];
  n58  [label="26:  transferPage1 = false"];
  n59  [label="27:  transferPage2 = true"];
  n60  [label="28:  addComponents()"];
  n61  [label="ELSE"];
  n62  [label="IF"];
  n63  [label="COND: harvestPage1"];
  n64  [label="THEN"];
  n65  [label="VAR"];
  n66  [label="TYPE: test.IndexCursor"];
  n67  [label="NAME: cursor"];
  n68  [label="INIT: = test.CursorBuilder.createCursor(gatorTable.getIndex('TagIndex'))"];
  n69  [label="32:  cursor.beforeFirst()"];
  n70  [label="VAR"];
  n71  [label="TYPE: test.Row"];
  n72  [label="NAME: latestRow"];
  n73  [label="INIT: = null"];
  n74  [label="WHILE"];
  n75  [label="COND: cursor.findNextRow(java.util.Collections.singletonMap('Tag Number', tag))"];
  n76  [label="BLOCK"];
  n77  [label="VAR"];
  n78  [label="TYPE: test.Row"];
  n79  [label="NAME: row"];
  n80  [label="INIT: = cursor.getCurrentRow()"];
  n81  [label="IF"];
  n82  [label="COND: row != null"];
  n83  [label="THEN"];
  n84  [label="37:  latestRow = row"];
  n85  [label="IF"];
  n86  [label="COND: latestRow != null"];
  n87  [label="THEN"];
  n88  [label="41:  previousRow = latestRow"];
  n89  [label="ELSE"];
  n90  [label="43:  previousRow = null"];
  n91  [label="45:  harvestPage1 = false"];
  n92  [label="46:  harvestPage2 = true"];
  n93  [label="47:  addComponents()"];
  n94  [label="ELSE"];
  n95  [label="IF"];
  n96  [label="COND: newGatorPage1"];
  n97  [label="THEN"];
  n98  [label="50:  newGatorPage1 = false"];
  n99  [label="51:  newGatorPage2 = true"];
  n100  [label="52:  addComponents()"];
  n101  [label="CATCH"];
  n102  [label="TYPE: java.lang.Exception"];
  n103  [label="NAME: e"];
  n104  [label="BLOCK"];
  n105  [label="57:  java.lang.System.err.println(e.toString())"];
  // graph-edges
  n1 -> n2;
  n2 -> n3;
  n2 -> n4;
  n2 -> n5;
  n5 -> n6;
  n5 -> n7;
  n5 -> n8;
  n5 -> n9;
  n9 -> n10;
  n10 -> n11;
  n10 -> n12;
  n5 -> n13;
  n13 -> n14;
  n14 -> n15;
  n14 -> n16;
  n13 -> n17;
  n17 -> n18;
  n17 -> n19;
  n19 -> n20;
  n20 -> n21;
  n21 -> n22;
  n21 -> n23;
  n21 -> n24;
  n24 -> n25;
  n24 -> n26;
  n24 -> n27;
  n21 -> n28;
  n21 -> n29;
  n29 -> n30;
  n29 -> n31;
  n31 -> n32;
  n32 -> n33;
  n32 -> n34;
  n32 -> n35;
  n31 -> n36;
  n31 -> n37;
  n37 -> n38;
  n37 -> n39;
  n37 -> n40;
  n31 -> n41;
  n41 -> n42;
  n41 -> n43;
  n43 -> n44;
  n44 -> n45;
  n44 -> n46;
  n44 -> n47;
  n43 -> n48;
  n48 -> n49;
  n48 -> n50;
  n50 -> n51;
  n31 -> n52;
  n52 -> n53;
  n52 -> n54;
  n54 -> n55;
  n52 -> n56;
  n56 -> n57;
  n31 -> n58;
  n31 -> n59;
  n31 -> n60;
  n29 -> n61;
  n61 -> n62;
  n62 -> n63;
  n62 -> n64;
  n64 -> n65;
  n65 -> n66;
  n65 -> n67;
  n65 -> n68;
  n64 -> n69;
  n64 -> n70;
  n70 -> n71;
  n70 -> n72;
  n70 -> n73;
  n64 -> n74;
  n74 -> n75;
  n74 -> n76;
  n76 -> n77;
  n77 -> n78;
  n77 -> n79;
  n77 -> n80;
  n76 -> n81;
  n81 -> n82;
  n81 -> n83;
  n83 -> n84;
  n64 -> n85;
  n85 -> n86;
  n85 -> n87;
  n87 -> n88;
  n85 -> n89;
  n89 -> n90;
  n64 -> n91;
  n64 -> n92;
  n64 -> n93;
  n62 -> n94;
  n94 -> n95;
  n95 -> n96;
  n95 -> n97;
  n97 -> n98;
  n97 -> n99;
  n97 -> n100;
  n20 -> n101;
  n101 -> n102;
  n101 -> n103;
  n101 -> n104;
  n104 -> n105;
  // end-of-graph
}
