digraph 2105_before_PDG_CTRL {
  // graph-vertices
  v1  [label="3:  void serialEvent(test.SerialPortEvent oEvent)"];
  v2  [label="4:  java.lang.String temp"];
  v3  [label="5:  if ((oEvent.getEventType()) == (SerialPortEvent.DATA_AVAILABLE))"];
  v4  [label="THEN"];
  v5  [label="6:  try"];
  v6  [label="7:  temp = serialInput.readLine()"];
  v7  [label="8:  java.lang.System.out.println(temp)"];
  v8  [label="9:  int index = temp.indexOf('.')"];
  v9  [label="10:  tag = temp.substring((index + 1))"];
  v10  [label="11:  if (transferPage1)"];
  v11  [label="THEN"];
  v12  [label="12:  test.IndexCursor cursor = test.CursorBuilder.createCursor(gatorTable.getIndex('TagIndex'))"];
  v13  [label="13:  cursor.beforeFirst()"];
  v14  [label="14:  test.Row latestRow = null"];
  v15  [label="15:  while (cursor.findNextRow(java.util.Collections.singletonMap('Tag Number', tag)))"];
  v16  [label="LOOP"];
  v17  [label="16:  test.Row row = cursor.getCurrentRow()"];
  v18  [label="17:  if (row != null)"];
  v19  [label="THEN"];
  v20  [label="18:  latestRow = row"];
  v21  [label="21:  if (latestRow != null)"];
  v22  [label="THEN"];
  v23  [label="22:  previousRow = latestRow"];
  v24  [label="ELSE"];
  v25  [label="24:  previousRow = null"];
  v26  [label="26:  transferPage1 = false"];
  v27  [label="27:  transferPage2 = true"];
  v28  [label="28:  addComponents()"];
  v29  [label="ELSE"];
  v30  [label="30:  if (harvestPage1)"];
  v31  [label="THEN"];
  v32  [label="31:  test.IndexCursor cursor = test.CursorBuilder.createCursor(gatorTable.getIndex('TagIndex'))"];
  v33  [label="32:  cursor.beforeFirst()"];
  v34  [label="33:  test.Row latestRow = null"];
  v35  [label="34:  while (cursor.findNextRow(java.util.Collections.singletonMap('Tag Number', tag)))"];
  v36  [label="LOOP"];
  v37  [label="35:  test.Row row = cursor.getCurrentRow()"];
  v38  [label="36:  if (row != null)"];
  v39  [label="THEN"];
  v40  [label="37:  latestRow = row"];
  v41  [label="40:  if (latestRow != null)"];
  v42  [label="THEN"];
  v43  [label="41:  previousRow = latestRow"];
  v44  [label="ELSE"];
  v45  [label="43:  previousRow = null"];
  v46  [label="45:  harvestPage1 = false"];
  v47  [label="46:  harvestPage2 = true"];
  v48  [label="47:  addComponents()"];
  v49  [label="ELSE"];
  v50  [label="49:  if (newGatorPage1)"];
  v51  [label="THEN"];
  v52  [label="50:  newGatorPage1 = false"];
  v53  [label="51:  newGatorPage2 = true"];
  v54  [label="52:  addComponents()"];
  v55  [label="56:  catch (java.lang.Exception e)"];
  v56  [label="57:  java.lang.System.err.println(e.toString())"];
  v57  [label="exit"];
  // graph-edges
  v1 -> v2;
  v1 -> v3;
  v3 -> v4  [label="True"];
  v4 -> v5;
  v5 -> v6;
  v5 -> v7;
  v5 -> v8;
  v5 -> v9;
  v5 -> v10;
  v10 -> v11  [label="True"];
  v11 -> v12;
  v11 -> v13;
  v11 -> v14;
  v11 -> v15;
  v15 -> v16  [label="True"];
  v16 -> v17;
  v16 -> v18;
  v18 -> v19  [label="True"];
  v19 -> v20;
  v11 -> v21;
  v21 -> v22  [label="True"];
  v22 -> v23;
  v21 -> v24  [label="False"];
  v24 -> v25;
  v11 -> v26;
  v11 -> v27;
  v11 -> v28;
  v10 -> v29  [label="False"];
  v29 -> v30;
  v30 -> v31  [label="True"];
  v31 -> v32;
  v31 -> v33;
  v31 -> v34;
  v31 -> v35;
  v35 -> v36  [label="True"];
  v36 -> v37;
  v36 -> v38;
  v38 -> v39  [label="True"];
  v39 -> v40;
  v31 -> v41;
  v41 -> v42  [label="True"];
  v42 -> v43;
  v41 -> v44  [label="False"];
  v44 -> v45;
  v31 -> v46;
  v31 -> v47;
  v31 -> v48;
  v30 -> v49  [label="False"];
  v49 -> v50;
  v50 -> v51  [label="True"];
  v51 -> v52;
  v51 -> v53;
  v51 -> v54;
  v5 -> v55  [label="Throws"];
  v55 -> v56;
  v1 -> v57;
  // end-of-graph
}
