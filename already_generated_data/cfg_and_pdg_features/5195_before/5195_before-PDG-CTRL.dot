digraph 5195_before_PDG_CTRL {
  // graph-vertices
  v1  [label="2:  void handleInboundBlockwiseUpload(final org.eclipse.californium.core.network.Exchange exchange, final org.eclipse.californium.core.coap.Request request)"];
  v2  [label="3:  if (requestExceedsMaxBodySize(request))"];
  v3  [label="THEN"];
  v4  [label="4:  org.eclipse.californium.core.coap.Response error = org.eclipse.californium.core.coap.Response.createResponse(request, ResponseCode.REQUEST_ENTITY_TOO_LARGE)"];
  v5  [label="5:  error.setPayload(java.lang.String.format('body too large, can process %d bytes max', maxResourceBodySize))"];
  v6  [label="6:  error.getOptions().setSize1(maxResourceBodySize)"];
  v7  [label="7:  exchange.setCurrentResponse(error)"];
  v8  [label="8:  lower().sendResponse(exchange, error)"];
  v9  [label="ELSE"];
  v10  [label="10:  org.eclipse.californium.core.coap.BlockOption block1 = request.getOptions().getBlock1()"];
  v11  [label="11:  org.eclipse.californium.core.network.stack.BlockwiseLayer.LOGGER.log(java.util.logging.Level.FINE, 'inbound request contains block1 option {0}', block1)"];
  v12  [label="12:  org.eclipse.californium.core.network.stack.KeyUri key = org.eclipse.californium.core.network.stack.BlockwiseLayer.getKey(exchange, request)"];
  v13  [label="13:  org.eclipse.californium.core.network.stack.Block1BlockwiseStatus status = getInboundBlock1Status(key, exchange, request)"];
  v14  [label="14:  if (((block1.getNum()) == 0) && ((status.getCurrentNum()) > 0))"];
  v15  [label="THEN"];
  v16  [label="15:  status = resetInboundBlock1Status(key, exchange, request)"];
  v17  [label="17:  if ((block1.getNum()) != (status.getCurrentNum()))"];
  v18  [label="THEN"];
  v19  [label="18:  org.eclipse.californium.core.network.stack.BlockwiseLayer.LOGGER.log(java.util.logging.Level.WARNING, 'peer sent wrong block, expected no. {0} but got {1}. Responding with 4.08 (Request Entity Incomplete)', new java.lang.Object[]{ status.getCurrentNum() , block1.getNum() })"];
  v20  [label="19:  sendBlock1ErrorResponse(key, exchange, request, ResponseCode.REQUEST_ENTITY_INCOMPLETE, 'wrong block number')"];
  v21  [label="ELSE"];
  v22  [label="21:  if (!(status.hasContentFormat(request.getOptions().getContentFormat())))"];
  v23  [label="THEN"];
  v24  [label="22:  sendBlock1ErrorResponse(key, exchange, request, ResponseCode.REQUEST_ENTITY_INCOMPLETE, 'unexpected Content-Format')"];
  v25  [label="ELSE"];
  v26  [label="24:  if (!(status.addBlock(request.getPayload())))"];
  v27  [label="THEN"];
  v28  [label="25:  sendBlock1ErrorResponse(key, exchange, request, ResponseCode.REQUEST_ENTITY_TOO_LARGE, ('body exceeded expected size ' + (status.getBufferSize())))"];
  v29  [label="ELSE"];
  v30  [label="27:  status.setCurrentNum(((status.getCurrentNum()) + 1))"];
  v31  [label="28:  if (block1.isM())"];
  v32  [label="THEN"];
  v33  [label="29:  org.eclipse.californium.core.network.stack.BlockwiseLayer.LOGGER.log(java.util.logging.Level.FINE, 'acknowledging incoming block1 [num={0}], expecting more blocks to come', block1.getNum())"];
  v34  [label="30:  org.eclipse.californium.core.coap.Response piggybacked = org.eclipse.californium.core.coap.Response.createResponse(request, ResponseCode.CONTINUE)"];
  v35  [label="31:  piggybacked.getOptions().setBlock1(block1.getSzx(), true, block1.getNum())"];
  v36  [label="32:  piggybacked.setLast(false)"];
  v37  [label="33:  exchange.setCurrentResponse(piggybacked)"];
  v38  [label="34:  lower().sendResponse(exchange, piggybacked)"];
  v39  [label="ELSE"];
  v40  [label="36:  org.eclipse.californium.core.network.stack.BlockwiseLayer.LOGGER.log(java.util.logging.Level.FINE, 'peer has sent last block1 [num={0}], delivering request to application layer', block1.getNum())"];
  v41  [label="37:  exchange.setBlock1ToAck(block1)"];
  v42  [label="38:  org.eclipse.californium.core.coap.Request assembled = new org.eclipse.californium.core.coap.Request(request.getCode())"];
  v43  [label="39:  assembled.setSenderIdentity(request.getSenderIdentity())"];
  v44  [label="40:  status.assembleMessage(assembled)"];
  v45  [label="41:  assembled.setMID(request.getMID())"];
  v46  [label="42:  assembled.setToken(request.getToken())"];
  v47  [label="43:  assembled.getOptions().setBlock2(request.getOptions().getBlock2())"];
  v48  [label="44:  clearBlock1Status(key)"];
  v49  [label="45:  exchange.setRequest(assembled)"];
  v50  [label="46:  upper().receiveRequest(exchange, assembled)"];
  v51  [label="exit"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v3 -> v4;
  v3 -> v5;
  v3 -> v6;
  v3 -> v7;
  v3 -> v8;
  v2 -> v9  [label="False"];
  v9 -> v10;
  v9 -> v11;
  v9 -> v12;
  v9 -> v13;
  v9 -> v14;
  v14 -> v15  [label="True"];
  v15 -> v16;
  v9 -> v17;
  v17 -> v18  [label="True"];
  v18 -> v19;
  v18 -> v20;
  v17 -> v21  [label="False"];
  v21 -> v22;
  v22 -> v23  [label="True"];
  v23 -> v24;
  v22 -> v25  [label="False"];
  v25 -> v26;
  v26 -> v27  [label="True"];
  v27 -> v28;
  v26 -> v29  [label="False"];
  v29 -> v30;
  v29 -> v31;
  v31 -> v32  [label="True"];
  v32 -> v33;
  v32 -> v34;
  v32 -> v35;
  v32 -> v36;
  v32 -> v37;
  v32 -> v38;
  v31 -> v39  [label="False"];
  v39 -> v40;
  v39 -> v41;
  v39 -> v42;
  v39 -> v43;
  v39 -> v44;
  v39 -> v45;
  v39 -> v46;
  v39 -> v47;
  v39 -> v48;
  v39 -> v49;
  v39 -> v50;
  v1 -> v51;
  // end-of-graph
}
