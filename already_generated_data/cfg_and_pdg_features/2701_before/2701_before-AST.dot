digraph 2701_before_AST {
  // graph-vertices
  n1  [label="ROOT: 2701_before.java"];
  n2  [label="CLASS"];
  n3  [label="MODIFIER: public"];
  n4  [label="NAME: Collapse"];
  n5  [label="METHOD"];
  n6  [label="MODIFIER: public"];
  n7  [label="RETURN: void"];
  n8  [label="NAME: collapse"];
  n9  [label="PARAMS"];
  n10  [label="VAR"];
  n11  [label="TYPE: java.util.Vector"];
  n12  [label="NAME: coordinate"];
  n13  [label="BLOCK"];
  n14  [label="VAR"];
  n15  [label="TYPE: java.util.Vector"];
  n16  [label="NAME: CubeCoor"];
  n17  [label="INIT: = new java.util.Vector(coordinate.cubeX(), coordinate.cubeY(), coordinate.cubeZ())"];
  n18  [label="VAR"];
  n19  [label="TYPE: hillbillies.model.Cube"];
  n20  [label="NAME: cube"];
  n21  [label="INIT: = getCube(CubeCoor)"];
  n22  [label="VAR"];
  n23  [label="TYPE: hillbillies.model.Terrain"];
  n24  [label="NAME: cubeTerrain"];
  n25  [label="INIT: = cube.getTerrain()"];
  n26  [label="IF"];
  n27  [label="COND: cubeTerrain == (Terrain.ROCK)"];
  n28  [label="THEN"];
  n29  [label="IF"];
  n30  [label="COND: (randInt(0, 99)) < 25"];
  n31  [label="THEN"];
  n32  [label="8:  new hillbillies.model.Log(this, cube)"];
  n33  [label="ELSE"];
  n34  [label="IF"];
  n35  [label="COND: cubeTerrain == (Terrain.WOOD)"];
  n36  [label="THEN"];
  n37  [label="IF"];
  n38  [label="COND: (randInt(0, 99)) < 25"];
  n39  [label="THEN"];
  n40  [label="13:  new hillbillies.model.Boulder(this, cube)"];
  n41  [label="17:  cube.setTerrain(Terrain.AIR)"];
  // graph-edges
  n1 -> n2;
  n2 -> n3;
  n2 -> n4;
  n2 -> n5;
  n5 -> n6;
  n5 -> n7;
  n5 -> n8;
  n5 -> n9;
  n9 -> n10;
  n10 -> n11;
  n10 -> n12;
  n5 -> n13;
  n13 -> n14;
  n14 -> n15;
  n14 -> n16;
  n14 -> n17;
  n13 -> n18;
  n18 -> n19;
  n18 -> n20;
  n18 -> n21;
  n13 -> n22;
  n22 -> n23;
  n22 -> n24;
  n22 -> n25;
  n13 -> n26;
  n26 -> n27;
  n26 -> n28;
  n28 -> n29;
  n29 -> n30;
  n29 -> n31;
  n31 -> n32;
  n26 -> n33;
  n33 -> n34;
  n34 -> n35;
  n34 -> n36;
  n36 -> n37;
  n37 -> n38;
  n37 -> n39;
  n39 -> n40;
  n13 -> n41;
  // end-of-graph
}
