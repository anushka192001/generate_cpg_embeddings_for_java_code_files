digraph 4334_before_AST {
  // graph-vertices
  n1  [label="ROOT: 4334_before.java"];
  n2  [label="CLASS"];
  n3  [label="MODIFIER: public"];
  n4  [label="NAME: Selectandrespondtofastestanswer"];
  n5  [label="METHOD"];
  n6  [label="MODIFIER: private"];
  n7  [label="RETURN: long"];
  n8  [label="NAME: selectAndRespondToFastestAnswer"];
  n9  [label="BLOCK"];
  n10  [label="3:  android.util.Log.d(com.seniordesign.wolfpack.quizinator.activities.ManageGameplayActivity.TAG, 'selecting Fastest Answer')"];
  n11  [label="VAR"];
  n12  [label="TYPE: com.seniordesign.wolfpack.quizinator.messages.Answer"];
  n13  [label="NAME: fastestCorrectAnswer"];
  n14  [label="INIT: = null"];
  n15  [label="FOR-EACH"];
  n16  [label="TYPE: com.seniordesign.wolfpack.quizinator.messages.Answer"];
  n17  [label="NAME: answerI"];
  n18  [label="IN: answers"];
  n19  [label="BLOCK"];
  n20  [label="IF"];
  n21  [label="COND: currentCard.getCorrectAnswer().equals(answerI.getAnswer())"];
  n22  [label="THEN"];
  n23  [label="IF"];
  n24  [label="COND: (fastestCorrectAnswer == null) || ((answerI.getTimeTaken()) < (fastestCorrectAnswer.getTimeTaken()))"];
  n25  [label="THEN"];
  n26  [label="IF"];
  n27  [label="COND: fastestCorrectAnswer != null"];
  n28  [label="THEN"];
  n29  [label="9:  android.util.Log.d(com.seniordesign.wolfpack.quizinator.activities.ManageGameplayActivity.TAG, 'Setting Fastest Answer')"];
  n30  [label="IF"];
  n31  [label="COND: (currentCard.isDoubleEdge()) && (!(fastestCorrectAnswer.getAnswer().isEmpty()))"];
  n32  [label="THEN"];
  n33  [label="VAR"];
  n34  [label="TYPE: java.lang.String"];
  n35  [label="NAME: confirmation"];
  n36  [label="INIT: = gson.toJson(new com.seniordesign.wolfpack.quizinator.messages.Confirmation(fastestCorrectAnswer.getAddress(), false))"];
  n37  [label="12:  com.seniordesign.wolfpack.quizinator.wifiDirect.ConnectionService.sendMessage(com.seniordesign.wolfpack.quizinator.wifiDirect.MessageCodes.MSG_ANSWER_CONFIRMATION_ACTIVITY, confirmation)"];
  n38  [label="15:  fastestCorrectAnswer = answerI"];
  n39  [label="ELSE"];
  n40  [label="IF"];
  n41  [label="COND: (currentCard.isDoubleEdge()) && (!(answerI.getAnswer().isEmpty()))"];
  n42  [label="THEN"];
  n43  [label="VAR"];
  n44  [label="TYPE: java.lang.String"];
  n45  [label="NAME: confirmation"];
  n46  [label="INIT: = gson.toJson(new com.seniordesign.wolfpack.quizinator.messages.Confirmation(answerI.getAddress(), false))"];
  n47  [label="19:  com.seniordesign.wolfpack.quizinator.wifiDirect.ConnectionService.sendMessage(com.seniordesign.wolfpack.quizinator.wifiDirect.MessageCodes.MSG_ANSWER_CONFIRMATION_ACTIVITY, confirmation)"];
  n48  [label="ELSE"];
  n49  [label="IF"];
  n50  [label="COND: (currentCard.isDoubleEdge()) && (!(answerI.getAnswer().isEmpty()))"];
  n51  [label="THEN"];
  n52  [label="VAR"];
  n53  [label="TYPE: java.lang.String"];
  n54  [label="NAME: confirmation"];
  n55  [label="INIT: = gson.toJson(new com.seniordesign.wolfpack.quizinator.messages.Confirmation(answerI.getAddress(), false))"];
  n56  [label="25:  com.seniordesign.wolfpack.quizinator.wifiDirect.ConnectionService.sendMessage(com.seniordesign.wolfpack.quizinator.wifiDirect.MessageCodes.MSG_ANSWER_CONFIRMATION_ACTIVITY, confirmation)"];
  n57  [label="29:  android.util.Log.d(com.seniordesign.wolfpack.quizinator.activities.ManageGameplayActivity.TAG, 'Found Fastest Answer')"];
  n58  [label="IF"];
  n59  [label="COND: fastestCorrectAnswer != null"];
  n60  [label="THEN"];
  n61  [label="31:  android.util.Log.d(com.seniordesign.wolfpack.quizinator.activities.ManageGameplayActivity.TAG, 'Sending Message To Fastest Answer')"];
  n62  [label="VAR"];
  n63  [label="TYPE: java.lang.String"];
  n64  [label="NAME: confirmation"];
  n65  [label="INIT: = gson.toJson(new com.seniordesign.wolfpack.quizinator.messages.Confirmation(fastestCorrectAnswer.getAddress(), true))"];
  n66  [label="33:  com.seniordesign.wolfpack.quizinator.wifiDirect.ConnectionService.sendMessage(com.seniordesign.wolfpack.quizinator.wifiDirect.MessageCodes.MSG_ANSWER_CONFIRMATION_ACTIVITY, confirmation)"];
  n67  [label="35:  answers = new java.util.ArrayList<>()"];
  n68  [label="36:  return fastestCorrectAnswer == null ? -1 : fastestCorrectAnswer.getTimeTaken();"];
  // graph-edges
  n1 -> n2;
  n2 -> n3;
  n2 -> n4;
  n2 -> n5;
  n5 -> n6;
  n5 -> n7;
  n5 -> n8;
  n5 -> n9;
  n9 -> n10;
  n9 -> n11;
  n11 -> n12;
  n11 -> n13;
  n11 -> n14;
  n9 -> n15;
  n15 -> n16;
  n15 -> n17;
  n15 -> n18;
  n15 -> n19;
  n19 -> n20;
  n20 -> n21;
  n20 -> n22;
  n22 -> n23;
  n23 -> n24;
  n23 -> n25;
  n25 -> n26;
  n26 -> n27;
  n26 -> n28;
  n28 -> n29;
  n28 -> n30;
  n30 -> n31;
  n30 -> n32;
  n32 -> n33;
  n33 -> n34;
  n33 -> n35;
  n33 -> n36;
  n32 -> n37;
  n25 -> n38;
  n23 -> n39;
  n39 -> n40;
  n40 -> n41;
  n40 -> n42;
  n42 -> n43;
  n43 -> n44;
  n43 -> n45;
  n43 -> n46;
  n42 -> n47;
  n20 -> n48;
  n48 -> n49;
  n49 -> n50;
  n49 -> n51;
  n51 -> n52;
  n52 -> n53;
  n52 -> n54;
  n52 -> n55;
  n51 -> n56;
  n9 -> n57;
  n9 -> n58;
  n58 -> n59;
  n58 -> n60;
  n60 -> n61;
  n60 -> n62;
  n62 -> n63;
  n62 -> n64;
  n62 -> n65;
  n60 -> n66;
  n9 -> n67;
  n9 -> n68;
  // end-of-graph
}
