digraph 1411_before_PDG_DATA {
  // graph-vertices
  v1  [label="2:  void getStartAndEndDays()"];
  v2  [label="3:  debug(originalOutput)"];
  v3  [label="4:  int start = originalOutput.indexOf('this/day={D')"];
  v4  [label="5:  int end = originalOutput.indexOf('$0}', start)"];
  v5  [label="6:  boolean startSet = false"];
  v6  [label="7:  java.util.StringTokenizer parts = new java.util.StringTokenizer('')"];
  v7  [label="8:  try"];
  v8  [label="end-try"];
  v9  [label="9:  parts = new java.util.StringTokenizer(originalOutput.substring(start, end), '{,')"];
  v10  [label="end-catch"];
  v11  [label="10:  catch (java.lang.Exception e)"];
  v12  [label="11:  debug('Could not start processing start and end dates from original output')"];
  v13  [label="13:  while (parts.hasMoreTokens())"];
  v14  [label="endwhile"];
  v15  [label="14:  java.util.StringTokenizer st = new java.util.StringTokenizer(parts.nextToken(), 'D$')"];
  v16  [label="15:  java.lang.String lastToken = new java.lang.String()"];
  v17  [label="16:  while (st.hasMoreTokens())"];
  v18  [label="endwhile"];
  v19  [label="17:  lastToken = st.nextToken()"];
  v20  [label="18:  if (!startSet)"];
  v21  [label="19:  try"];
  v22  [label="end-try"];
  v23  [label="20:  startDay = java.lang.Integer.parseInt(lastToken)"];
  v24  [label="21:  startSet = true"];
  v25  [label="end-catch"];
  v26  [label="22:  catch (java.lang.Exception e)"];
  v27  [label="23:  debug('Couldn't parse start and end date from output.')"];
  v28  [label="endif"];
  v29  [label="27:  try"];
  v30  [label="end-try"];
  v31  [label="28:  endDay = java.lang.Integer.parseInt(lastToken)"];
  v32  [label="end-catch"];
  v33  [label="29:  catch (java.lang.Exception e)"];
  v34  [label="30:  debug('Couldn't parse start and end date from output.')"];
  v35  [label="33:  debug(((('The start day is: ' + start) + ' The end day is: ') + end))"];
  // graph-edges
  v1 -> v2  [arrowhead=empty, color=gray, style=dashed, label=""];
  v2 -> v3  [arrowhead=empty, color=gray, style=dashed, label=""];
  v3 -> v4  [arrowhead=empty, color=gray, style=dashed, label=""];
  v4 -> v5  [arrowhead=empty, color=gray, style=dashed, label=""];
  v5 -> v6  [arrowhead=empty, color=gray, style=dashed, label=""];
  v6 -> v7  [arrowhead=empty, color=gray, style=dashed, label=""];
  v7 -> v9  [arrowhead=empty, color=gray, style=dashed, label=""];
  v9 -> v8  [arrowhead=empty, color=gray, style=dashed, label=""];
  v8 -> v11  [arrowhead=empty, color=gray, style=dashed, label="Throws"];
  v11 -> v12  [arrowhead=empty, color=gray, style=dashed, label=""];
  v12 -> v10  [arrowhead=empty, color=gray, style=dashed, label=""];
  v10 -> v8  [arrowhead=empty, color=gray, style=dashed, label=""];
  v8 -> v13  [arrowhead=empty, color=gray, style=dashed, label=""];
  v13 -> v14  [arrowhead=empty, color=gray, style=dashed, label="False"];
  v13 -> v15  [arrowhead=empty, color=gray, style=dashed, label="True"];
  v15 -> v16  [arrowhead=empty, color=gray, style=dashed, label=""];
  v16 -> v17  [arrowhead=empty, color=gray, style=dashed, label=""];
  v17 -> v18  [arrowhead=empty, color=gray, style=dashed, label="False"];
  v17 -> v19  [arrowhead=empty, color=gray, style=dashed, label="True"];
  v19 -> v20  [arrowhead=empty, color=gray, style=dashed, label=""];
  v20 -> v21  [arrowhead=empty, color=gray, style=dashed, label="True"];
  v21 -> v23  [arrowhead=empty, color=gray, style=dashed, label=""];
  v23 -> v24  [arrowhead=empty, color=gray, style=dashed, label=""];
  v24 -> v22  [arrowhead=empty, color=gray, style=dashed, label=""];
  v22 -> v26  [arrowhead=empty, color=gray, style=dashed, label="Throws"];
  v26 -> v27  [arrowhead=empty, color=gray, style=dashed, label=""];
  v27 -> v25  [arrowhead=empty, color=gray, style=dashed, label=""];
  v25 -> v22  [arrowhead=empty, color=gray, style=dashed, label=""];
  v22 -> v28  [arrowhead=empty, color=gray, style=dashed, label=""];
  v20 -> v28  [arrowhead=empty, color=gray, style=dashed, label="False"];
  v28 -> v17  [arrowhead=empty, color=gray, style=dashed, label=""];
  v18 -> v29  [arrowhead=empty, color=gray, style=dashed, label=""];
  v29 -> v31  [arrowhead=empty, color=gray, style=dashed, label=""];
  v31 -> v30  [arrowhead=empty, color=gray, style=dashed, label=""];
  v30 -> v33  [arrowhead=empty, color=gray, style=dashed, label="Throws"];
  v33 -> v34  [arrowhead=empty, color=gray, style=dashed, label=""];
  v34 -> v32  [arrowhead=empty, color=gray, style=dashed, label=""];
  v32 -> v30  [arrowhead=empty, color=gray, style=dashed, label=""];
  v30 -> v13  [arrowhead=empty, color=gray, style=dashed, label=""];
  v14 -> v35  [arrowhead=empty, color=gray, style=dashed, label=""];
   v3 -> v4   [style=bold, label=" (start)"];
   v3 -> v9   [style=bold, label=" (start)"];
   v3 -> v35   [style=bold, label=" (start)"];
   v4 -> v9   [style=bold, label=" (end)"];
   v4 -> v35   [style=bold, label=" (end)"];
   v5 -> v20   [style=bold, label=" (startSet)"];
   v9 -> v13   [style=bold, label=" (parts)"];
   v9 -> v15   [style=bold, label=" (parts)"];
   v15 -> v17   [style=bold, label=" (st)"];
   v15 -> v19   [style=bold, label=" (st)"];
   v16 -> v31   [style=bold, label=" (lastToken)"];
   v19 -> v31   [style=bold, label=" (lastToken)"];
   v19 -> v23   [style=bold, label=" (lastToken)"];
   v24 -> v20   [style=bold, label=" (startSet)"];
  // end-of-graph
}
