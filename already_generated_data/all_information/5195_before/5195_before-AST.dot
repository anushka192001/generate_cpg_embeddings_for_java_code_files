digraph 5195_before_AST {
  // graph-vertices
  n1  [label="ROOT: 5195_before.java"];
  n2  [label="CLASS"];
  n3  [label="MODIFIER: public"];
  n4  [label="NAME: Handleinboundblockwiseupload"];
  n5  [label="METHOD"];
  n6  [label="MODIFIER: private"];
  n7  [label="RETURN: void"];
  n8  [label="NAME: handleInboundBlockwiseUpload"];
  n9  [label="PARAMS"];
  n10  [label="VAR"];
  n11  [label="TYPE: org.eclipse.californium.core.network.Exchange"];
  n12  [label="NAME: exchange"];
  n13  [label="VAR"];
  n14  [label="TYPE: org.eclipse.californium.core.coap.Request"];
  n15  [label="NAME: request"];
  n16  [label="BLOCK"];
  n17  [label="IF"];
  n18  [label="COND: requestExceedsMaxBodySize(request)"];
  n19  [label="THEN"];
  n20  [label="VAR"];
  n21  [label="TYPE: org.eclipse.californium.core.coap.Response"];
  n22  [label="NAME: error"];
  n23  [label="INIT: = org.eclipse.californium.core.coap.Response.createResponse(request, ResponseCode.REQUEST_ENTITY_TOO_LARGE)"];
  n24  [label="5:  error.setPayload(java.lang.String.format('body too large, can process %d bytes max', maxResourceBodySize))"];
  n25  [label="6:  error.getOptions().setSize1(maxResourceBodySize)"];
  n26  [label="7:  exchange.setCurrentResponse(error)"];
  n27  [label="8:  lower().sendResponse(exchange, error)"];
  n28  [label="ELSE"];
  n29  [label="VAR"];
  n30  [label="TYPE: org.eclipse.californium.core.coap.BlockOption"];
  n31  [label="NAME: block1"];
  n32  [label="INIT: = request.getOptions().getBlock1()"];
  n33  [label="11:  org.eclipse.californium.core.network.stack.BlockwiseLayer.LOGGER.log(java.util.logging.Level.FINE, 'inbound request contains block1 option {0}', block1)"];
  n34  [label="VAR"];
  n35  [label="TYPE: org.eclipse.californium.core.network.stack.KeyUri"];
  n36  [label="NAME: key"];
  n37  [label="INIT: = org.eclipse.californium.core.network.stack.BlockwiseLayer.getKey(exchange, request)"];
  n38  [label="VAR"];
  n39  [label="TYPE: org.eclipse.californium.core.network.stack.Block1BlockwiseStatus"];
  n40  [label="NAME: status"];
  n41  [label="INIT: = getInboundBlock1Status(key, exchange, request)"];
  n42  [label="IF"];
  n43  [label="COND: ((block1.getNum()) == 0) && ((status.getCurrentNum()) > 0)"];
  n44  [label="THEN"];
  n45  [label="15:  status = resetInboundBlock1Status(key, exchange, request)"];
  n46  [label="IF"];
  n47  [label="COND: (block1.getNum()) != (status.getCurrentNum())"];
  n48  [label="THEN"];
  n49  [label="18:  org.eclipse.californium.core.network.stack.BlockwiseLayer.LOGGER.log(java.util.logging.Level.WARNING, 'peer sent wrong block, expected no. {0} but got {1}. Responding with 4.08 (Request Entity Incomplete)', new java.lang.Object[]{ status.getCurrentNum() , block1.getNum() })"];
  n50  [label="19:  sendBlock1ErrorResponse(key, exchange, request, ResponseCode.REQUEST_ENTITY_INCOMPLETE, 'wrong block number')"];
  n51  [label="ELSE"];
  n52  [label="IF"];
  n53  [label="COND: !(status.hasContentFormat(request.getOptions().getContentFormat()))"];
  n54  [label="THEN"];
  n55  [label="22:  sendBlock1ErrorResponse(key, exchange, request, ResponseCode.REQUEST_ENTITY_INCOMPLETE, 'unexpected Content-Format')"];
  n56  [label="ELSE"];
  n57  [label="IF"];
  n58  [label="COND: !(status.addBlock(request.getPayload()))"];
  n59  [label="THEN"];
  n60  [label="25:  sendBlock1ErrorResponse(key, exchange, request, ResponseCode.REQUEST_ENTITY_TOO_LARGE, ('body exceeded expected size ' + (status.getBufferSize())))"];
  n61  [label="ELSE"];
  n62  [label="27:  status.setCurrentNum(((status.getCurrentNum()) + 1))"];
  n63  [label="IF"];
  n64  [label="COND: block1.isM()"];
  n65  [label="THEN"];
  n66  [label="29:  org.eclipse.californium.core.network.stack.BlockwiseLayer.LOGGER.log(java.util.logging.Level.FINE, 'acknowledging incoming block1 [num={0}], expecting more blocks to come', block1.getNum())"];
  n67  [label="VAR"];
  n68  [label="TYPE: org.eclipse.californium.core.coap.Response"];
  n69  [label="NAME: piggybacked"];
  n70  [label="INIT: = org.eclipse.californium.core.coap.Response.createResponse(request, ResponseCode.CONTINUE)"];
  n71  [label="31:  piggybacked.getOptions().setBlock1(block1.getSzx(), true, block1.getNum())"];
  n72  [label="32:  piggybacked.setLast(false)"];
  n73  [label="33:  exchange.setCurrentResponse(piggybacked)"];
  n74  [label="34:  lower().sendResponse(exchange, piggybacked)"];
  n75  [label="ELSE"];
  n76  [label="36:  org.eclipse.californium.core.network.stack.BlockwiseLayer.LOGGER.log(java.util.logging.Level.FINE, 'peer has sent last block1 [num={0}], delivering request to application layer', block1.getNum())"];
  n77  [label="37:  exchange.setBlock1ToAck(block1)"];
  n78  [label="VAR"];
  n79  [label="TYPE: org.eclipse.californium.core.coap.Request"];
  n80  [label="NAME: assembled"];
  n81  [label="INIT: = new org.eclipse.californium.core.coap.Request(request.getCode())"];
  n82  [label="39:  assembled.setSenderIdentity(request.getSenderIdentity())"];
  n83  [label="40:  status.assembleMessage(assembled)"];
  n84  [label="41:  assembled.setMID(request.getMID())"];
  n85  [label="42:  assembled.setToken(request.getToken())"];
  n86  [label="43:  assembled.getOptions().setBlock2(request.getOptions().getBlock2())"];
  n87  [label="44:  clearBlock1Status(key)"];
  n88  [label="45:  exchange.setRequest(assembled)"];
  n89  [label="46:  upper().receiveRequest(exchange, assembled)"];
  // graph-edges
  n1 -> n2;
  n2 -> n3;
  n2 -> n4;
  n2 -> n5;
  n5 -> n6;
  n5 -> n7;
  n5 -> n8;
  n5 -> n9;
  n9 -> n10;
  n10 -> n11;
  n10 -> n12;
  n9 -> n13;
  n13 -> n14;
  n13 -> n15;
  n5 -> n16;
  n16 -> n17;
  n17 -> n18;
  n17 -> n19;
  n19 -> n20;
  n20 -> n21;
  n20 -> n22;
  n20 -> n23;
  n19 -> n24;
  n19 -> n25;
  n19 -> n26;
  n19 -> n27;
  n17 -> n28;
  n28 -> n29;
  n29 -> n30;
  n29 -> n31;
  n29 -> n32;
  n28 -> n33;
  n28 -> n34;
  n34 -> n35;
  n34 -> n36;
  n34 -> n37;
  n28 -> n38;
  n38 -> n39;
  n38 -> n40;
  n38 -> n41;
  n28 -> n42;
  n42 -> n43;
  n42 -> n44;
  n44 -> n45;
  n28 -> n46;
  n46 -> n47;
  n46 -> n48;
  n48 -> n49;
  n48 -> n50;
  n46 -> n51;
  n51 -> n52;
  n52 -> n53;
  n52 -> n54;
  n54 -> n55;
  n52 -> n56;
  n56 -> n57;
  n57 -> n58;
  n57 -> n59;
  n59 -> n60;
  n57 -> n61;
  n61 -> n62;
  n61 -> n63;
  n63 -> n64;
  n63 -> n65;
  n65 -> n66;
  n65 -> n67;
  n67 -> n68;
  n67 -> n69;
  n67 -> n70;
  n65 -> n71;
  n65 -> n72;
  n65 -> n73;
  n65 -> n74;
  n63 -> n75;
  n75 -> n76;
  n75 -> n77;
  n75 -> n78;
  n78 -> n79;
  n78 -> n80;
  n78 -> n81;
  n75 -> n82;
  n75 -> n83;
  n75 -> n84;
  n75 -> n85;
  n75 -> n86;
  n75 -> n87;
  n75 -> n88;
  n75 -> n89;
  // end-of-graph
}
