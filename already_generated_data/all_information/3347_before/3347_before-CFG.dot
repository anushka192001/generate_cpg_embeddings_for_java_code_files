digraph 3347_before_CFG {
  // graph-vertices
  v1  [label="2:  org.wso2.carbon.identity.oauth2.model.AccessTokenDO retrieveAccessToken(java.lang.String accessTokenIdentifier, boolean includeExpired)"];
  v2  [label="3:  org.wso2.carbon.identity.oauth2.model.AccessTokenDO dataDO = null"];
  v3  [label="4:  java.sql.Connection connection = org.wso2.carbon.identity.core.util.IdentityDatabaseUtil.getDBConnection()"];
  v4  [label="5:  java.sql.PreparedStatement prepStmt = null"];
  v5  [label="6:  java.sql.ResultSet resultSet = null"];
  v6  [label="7:  java.lang.String userStoreDomain = null"];
  v7  [label="8:  try"];
  v8  [label="end-try"];
  v9  [label="9:  if ((org.wso2.carbon.identity.oauth2.util.OAuth2Util.checkAccessTokenPartitioningEnabled()) && (org.wso2.carbon.identity.oauth2.util.OAuth2Util.checkUserNameAssertionEnabled()))"];
  v10  [label="10:  userStoreDomain = org.wso2.carbon.identity.oauth2.util.OAuth2Util.getUserStoreDomainFromAccessToken(accessTokenIdentifier)"];
  v11  [label="endif"];
  v12  [label="12:  java.lang.String sql"];
  v13  [label="13:  if (includeExpired)"];
  v14  [label="14:  sql = SQLQueries.RETRIEVE_ACTIVE_EXPIRED_ACCESS_TOKEN"];
  v15  [label="endif"];
  v16  [label="16:  sql = SQLQueries.RETRIEVE_ACTIVE_ACCESS_TOKEN"];
  v17  [label="18:  if (org.apache.commons.lang.StringUtils.isNotBlank(userStoreDomain))"];
  v18  [label="19:  sql = sql.replace(org.wso2.carbon.identity.oauth2.dao.TokenMgtDAO.IDN_OAUTH2_ACCESS_TOKEN, (((org.wso2.carbon.identity.oauth2.dao.TokenMgtDAO.IDN_OAUTH2_ACCESS_TOKEN) + '_') + userStoreDomain))"];
  v19  [label="endif"];
  v20  [label="21:  prepStmt = connection.prepareStatement(sql)"];
  v21  [label="22:  prepStmt.setString(1, org.wso2.carbon.identity.oauth2.dao.TokenMgtDAO.persistenceProcessor.getProcessedAccessTokenIdentifier(accessTokenIdentifier))"];
  v22  [label="23:  resultSet = prepStmt.executeQuery()"];
  v23  [label="24:  int iterateId = 0"];
  v24  [label="25:  java.util.List<java.lang.String> scopes = new java.util.ArrayList<>()"];
  v25  [label="26:  while (resultSet.next())"];
  v26  [label="endwhile"];
  v27  [label="27:  if (iterateId == 0)"];
  v28  [label="28:  java.lang.String consumerKey = org.wso2.carbon.identity.oauth2.dao.TokenMgtDAO.persistenceProcessor.getPreprocessedClientId(resultSet.getString(1))"];
  v29  [label="29:  java.lang.String authorizedUser = resultSet.getString(2)"];
  v30  [label="30:  int tenantId = resultSet.getInt(3)"];
  v31  [label="31:  java.lang.String tenantDomain = org.wso2.carbon.identity.oauth2.util.OAuth2Util.getTenantDomain(tenantId)"];
  v32  [label="32:  java.lang.String userDomain = resultSet.getString(4)"];
  v33  [label="33:  java.lang.String[] scope = org.wso2.carbon.identity.oauth2.util.OAuth2Util.buildScopeArray(resultSet.getString(5))"];
  v34  [label="34:  java.sql.Timestamp issuedTime = resultSet.getTimestamp(6, java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone('UTC')))"];
  v35  [label="35:  java.sql.Timestamp refreshTokenIssuedTime = resultSet.getTimestamp(7, java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone('UTC')))"];
  v36  [label="36:  long validityPeriodInMillis = resultSet.getLong(8)"];
  v37  [label="37:  long refreshTokenValidityPeriodMillis = resultSet.getLong(9)"];
  v38  [label="38:  java.lang.String tokenType = resultSet.getString(10)"];
  v39  [label="39:  java.lang.String refreshToken = resultSet.getString(11)"];
  v40  [label="40:  java.lang.String tokenId = resultSet.getString(12)"];
  v41  [label="41:  java.lang.String grantType = resultSet.getString(13)"];
  v42  [label="42:  java.lang.String subjectIdentifier = resultSet.getString(14)"];
  v43  [label="43:  org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser user = new org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser()"];
  v44  [label="44:  user.setUserName(authorizedUser)"];
  v45  [label="45:  user.setUserStoreDomain(userDomain)"];
  v46  [label="46:  user.setTenantDomain(tenantDomain)"];
  v47  [label="47:  user.setAuthenticatedSubjectIdentifier(subjectIdentifier)"];
  v48  [label="48:  dataDO = new org.wso2.carbon.identity.oauth2.model.AccessTokenDO(consumerKey, user, scope, issuedTime, refreshTokenIssuedTime, validityPeriodInMillis, refreshTokenValidityPeriodMillis, tokenType)"];
  v49  [label="49:  dataDO.setAccessToken(accessTokenIdentifier)"];
  v50  [label="50:  dataDO.setRefreshToken(refreshToken)"];
  v51  [label="51:  dataDO.setTokenId(tokenId)"];
  v52  [label="52:  dataDO.setGrantType(grantType)"];
  v53  [label="53:  dataDO.setTenantID(tenantId)"];
  v54  [label="endif"];
  v55  [label="55:  scopes.add(resultSet.getString(5))"];
  v56  [label="57:  iterateId++"];
  v57  [label="59:  if (((scopes.size()) > 0) && (dataDO != null))"];
  v58  [label="60:  dataDO.setScope(((java.lang.String[]) (org.apache.commons.lang.ArrayUtils.addAll(dataDO.getScope(), scopes.toArray(new java.lang.String[scopes.size()])))))"];
  v59  [label="endif"];
  v60  [label="62:  connection.commit()"];
  v61  [label="65:  finally"];
  v62  [label="66:  org.wso2.carbon.identity.core.util.IdentityDatabaseUtil.closeAllConnections(connection, resultSet, prepStmt)"];
  v63  [label="end-finally"];
  v64  [label="end-catch"];
  v65  [label="63:  catch (java.sql.SQLException e)"];
  v66  [label="64:  throw new org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception(('Error when retrieving Access Token : ' + accessTokenIdentifier), e)"];
  v67  [label="68:  return dataDO;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v9;
  v9 -> v10  [label="True"];
  v10 -> v11;
  v9 -> v11  [label="False"];
  v11 -> v12;
  v12 -> v13;
  v13 -> v14  [label="True"];
  v14 -> v15;
  v13 -> v16  [label="False"];
  v16 -> v15;
  v15 -> v17;
  v17 -> v18  [label="True"];
  v18 -> v19;
  v17 -> v19  [label="False"];
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26  [label="False"];
  v25 -> v27  [label="True"];
  v27 -> v28  [label="True"];
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52;
  v52 -> v53;
  v53 -> v54;
  v27 -> v55  [label="False"];
  v55 -> v54;
  v54 -> v56;
  v56 -> v25;
  v26 -> v57;
  v57 -> v58  [label="True"];
  v58 -> v59;
  v57 -> v59  [label="False"];
  v59 -> v60;
  v60 -> v8;
  v8 -> v61;
  v61 -> v62;
  v62 -> v63;
  v8 -> v65  [label="Throws"];
  v65 -> v66;
  v66 -> v8  [label="Throws"];
  v64 -> v61;
  v63 -> v67;
  // end-of-graph
}
